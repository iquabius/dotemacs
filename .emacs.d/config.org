#+TITLE: Emacs Configuration
#+AUTHOR: Josias Duarte Busiquia

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Josias Duarte Busiquia"
      user-mail-address "iquabius@gmail.com")
#+END_SRC

* Appearance
** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+BEGIN_SRC emacs-lisp
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+END_SRC

I tend to switch themes more often than normal. For example, switching
to a lighter theme (such as the default) or to a different theme
depending on the time of day or my mood. Normally, switching themes is
a multi-step process with ~disable-theme~ and ~load-theme~. The
~switch-theme~ function will do that in one swoop. I just choose which
theme I want to go to.

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+END_SRC

** Spacegray theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package spacegray-theme
  :if (window-system)
  :ensure t
  :config
  (load-theme 'spacegray))
#+END_SRC

** Monokai theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+END_SRC

** Waher theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package waher-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'waher))
#+END_SRC

** Emacs on Terminal

Set a theme which looks good in a text-only terminal.

#+BEGIN_SRC emacs-lisp
(if (not (display-graphic-p))           ; if on text-only terminal
    (load-theme 'tsdh-dark t))
#+END_SRC

** Convenient theme functions

Taken from [[https://github.com/danielmai/.emacs.d][Daniel Mai's Configuration]].

#+BEGIN_SRC emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "<f12>" 'switch-theme)
(bind-key "<f11>" 'disable-active-themes)
#+END_SRC

** Indentation

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :init
  (setq highlight-indent-guides-method 'character)
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC

** Colored Variables

Color each variable, and downplay standard key words.

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :ensure t
  :diminish color-identifiers-mode
  :init
  (add-hook 'after-init-hook 'global-color-identifiers-mode))
#+END_SRC

* Mode Line

Bugged in Emacs 24.5.1 on Elementary OS 0.3 Freya: the mode line gets
all grey after moving the focus out of the Emacs window.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package powerline
  :ensure t
  :init
  (setq powerline-default-separator 'wave)
  :config
  (powerline-center-theme))
#+END_SRC

* Custom Keys

Ergonomic natigation inspired by [[https://ergoemacs.github.io/][Ergoemacs]].

#+BEGIN_SRC emacs-lisp
(bind-keys ("M-i" . previous-line)
           ("M-j" . backward-char)
           ("M-k" . next-line)
           ("M-l" . forward-char)
           ("M-o" . forward-word)
           ("M-u" . backward-word)
           ("M-S-o" . forward-paragraph)
           ("M-S-u" . backward-paragraph))

(bind-keys ("s-b" . browse-url-at-point))
#+END_SRC

* Autocompletion

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  ;; Ergonomic navigation
  (unbind-key "M-p" company-active-map)
  (unbind-key "M-n" company-active-map)
  (bind-key "M-i" 'company-select-previous company-active-map)
  (bind-key "M-k" 'company-select-next company-active-map))
#+END_SRC

Display documentation in a popup with [[https://www.github.com/expez/company-quickhelp][company-quickhelp]].

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  :init
  (setq company-quickhelp-delay nil)
  :config
  (company-quickhelp-mode 1)
  (bind-key "M-h" 'company-quickhelp-manual-begin company-active-map))
#+END_SRC

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init (progn
            (require 'helm-config)
            (use-package helm-ag :defer 10  :ensure t)
            (setq helm-M-x-fuzzy-match t)
            (helm-mode)
            (use-package helm-swoop
              :ensure t
              :config
              (setq helm-swoop-split-direction 'split-window-horizontally)
              (setq helm-swoop-use-fuzzy-match t)
              ;; "M-i" is used in ergonomic key bindings to move to previous line
              (unbind-key "M-i" helm-swoop-map)
              :bind (("s-i" . helm-swoop)
                     ("s-I" . helm-swoop-back-to-last-point)
                     :map helm-swoop-map
                     ("s-i" . helm-multi-swoop-all-from-helm-swoop)
                     :map isearch-mode-map
                     ("s-i" . helm-swoop-from-isearch))))
    :config
    ;; "M-i" is used in ergonomic key bindings to move to previous line
    (unbind-key "M-i" helm-find-files-map)
    (unbind-key "M-i" helm-generic-files-map)
    (bind-key "s-i" 'helm-ff-properties-persistent helm-find-files-map)
    (bind-key "s-i" 'helm-ff-properties-persistent helm-generic-files-map)
    :bind (("C-c h" . helm-command-prefix)
           ("C-x b" . helm-mini)
           ("C-x C-b" . ibuffer)
           ("C-x f" . helm-recentf)
           ("C-x C-f" . helm-find-files)
           ("M-x" . helm-M-x)
           ("C-c M-x" . execute-extended-command)                  ;; old M-x
           ("M-y" . helm-show-kill-ring)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           ("M-i" . helm-previous-line)
           ("M-k" . helm-next-line)))
#+END_SRC

* LaTex

#+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :config
  (progn
    (setq
     reftex-plug-into-AUCTeX t
     TeX-auto-save nil                  ; Do not use directory 'auto'
     TeX-parse-self t                   ; Enable parse on load.
     TeX-PDF-mode t
     TeX-source-correlate-mode t        ; Enable Synctex
     TeX-show-compilation t)            ; Show compilation buffer
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (LaTeX-math-mode)
                (TeX-fold-mode 1)
                (turn-on-reftex)
                (visual-line-mode)
                (setq
                 TeX-clean-confirm nil)))))
#+END_SRC

Integration with LaTeXmk with [[https://github.com/tom-tan/auctex-latexmk][auctex-latexmk]] package.

#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :ensure t
  :config
  (progn
    (require 'auctex-latexmk)
    (auctex-latexmk-setup)))
#+END_SRC

* Languages
** Fish Shell

#+BEGIN_SRC emacs-lisp
(use-package fish-mode
  :ensure t)
#+END_SRC

* Multiple Cursors

Yep multiple cursors FTW, [[http://emacsrocks.com/e13.html][Emacs Rocks]].

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  (("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-M->" . mc/unmark-next-like-this)
   ("C-M-<" . mc/unmark-previous-like-this)
   ("C-*" . mc/mark-all-like-this)
   ("C-8" . mc/mark-all-words-like-this)
   ("C-S-<SPC>" . set-rectangular-region-anchor))
  :init
  (bind-keys :prefix-map mc-map
             :prefix "C-x m"
             ("C-a" . mc/edit-beginnings-of-lines)
             ("C-e" . mc/edit-ends-of-lines)
             ("C-m" . mc/mark-all-dwim)
             ("a" . mc/mark-all-like-this)
             ("d" . mc/mark-all-symbols-like-this-in-defun)
             ("h" . mc-hide-unmatched-lines-mode)
             ("i" . mc/insert-numbers)
             ("l" . mc/edit-lines)
             ("r" . mc/reverse-regions)
             ("s" . mc/sort-regions)))
#+END_SRC

* Org-mode
** Appearance

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

Show a downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "â¤µ")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Don't add extra indentation after edinting a code snippet in the org
src buffer.

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

Remove trailing lines from the source block after editing it in the
org src buffer.

#+BEGIN_SRC emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t)
#+END_SRC

* Projects

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :init (progn
          (projectile-global-mode t)
          (setq projectile-enable-caching t)
          (setq projectile-completion-system 'helm)
          (use-package helm-projectile
            :ensure t
            :config (helm-projectile-on))))
#+END_SRC

* Font

[[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] is a nice monospaced font.

Here's how we tell Emacs to use the font we want to use.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Source Code Pro-13"))
#+END_SRC

* Git Integration

Magit provides a nice interface to the /git/ version control system.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
#+END_SRC

Integration between Magit and [[https://github.com/RichiH/vcsh][vcsh]]. See the experimental project on
https://github.com/vanicat/magit-vcsh.

#+BEGIN_SRC emacs-lisp
(load-file "~/code/elisp/magit-vcsh/magit-vcsh.el")
#+END_SRC

Git-gutter shows a sign in the gutter area indicating whether a line
as inserted, modified or deleted.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :diminish git-gutter-mode
    :init
    (global-git-gutter-mode t)
    :config
    (custom-set-variables
     '(git-gutter:modified-sign "â"))
    :bind (("C-x C-g" . git-gutter:toggle)
           ("C-x v =" . git-gutter:popup-hunk)
           ("C-x p" . git-gutter:previous-hunk)
           ("C-x n" . git-gutter:next-hunk)
           ("C-x v s" . git-gutter:stage-hunk)
           ("C-x v r" . git-gutter:revert-hunk)))
#+END_SRC

Special mode for Git's configuration file.

#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode
  :ensure t)
#+END_SRC

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+BEGIN_SRC emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; Turn off the blinking cursor
;(blink-cursor-mode 1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

;; Highlights matching parenthesis
(show-paren-mode t)

;; Show column number next to line number
;; Not needed with powerline
(column-number-mode t)

;; Soft-wrapping
(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; Auto refresh files when changed from disk
(global-auto-revert-mode t)

;; Always strip trailing whitespaces from the file
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; -i gets alias definitions from .bash_profile
;; Looks like it's causing these bugs (noticed in projectile file listings):
;;   - bash: cannot set terminal process group (-1): Inappropriate ioctl for device
;;   - bash: no job control in this shell
;(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell t)

;; Make emacs maximized on startup
;(to-add-list 'default-frame-alist '(fullscreen . maximized))
;; Take emacs into fullscreen mode
(set-frame-parameter nil 'fullscreen 'fullboth)

;; Highlights current line
(global-hl-line-mode)
;; Keep syntax highlighting in the current line
(set-face-foreground 'highlight nil)

;; Allows you to âundoâ (and âredoâ) changes in the window configuration
;; âC-c leftâ and âC-c rightâ
(winner-mode t)

;; Default window splitting direction
;; 1: horizontally
;; 2: vertically
(setq split-width-threshold 1)

;; Automatically close parentheses, square brackets, double quotes...
(electric-pair-mode 1)
#+END_SRC

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+BEGIN_SRC emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+END_SRC

* Undo Tree

In Emacs is very confusing to redo things, you have to undo the undo.
For that reason I like to use the *undo-tree* package.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode))
#+END_SRC

* Whiteface

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :diminish whitespace-mode
  :bind ("C-c w" . whitespace-mode)
  :init
  (setq whitespace-display-mappings
        '((space-mark   ?\     [?\u00B7]     [?.])      ; space
          (space-mark   ?\xA0  [?\u00A4]     [?_])      ; hard space
          (newline-mark ?\n    [?Â¬ ?\n])                ; end-of-line
          (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t]) ; tab
          )
        whitespace-style '(face
                           lines-tail
                           newline
                           newline-mark
                           spaces
                           space-mark
                           tabs
                           tab-mark
                           trailing)
        whitespace-line-column 80)
  :config
  ;; TODO: must reset these after using the ~switch-theme~ function.
  (set-face-background 'whitespace-space   nil)
  (set-face-background 'whitespace-hspace  nil)
  (set-face-background 'whitespace-newline nil)
  (set-face-background 'whitespace-tab     nil))
#+END_SRC

Some characters to use: Â¬ Â» Â· â¦ â© â¶ âº â³ âµ â¼ Â¶
