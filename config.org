#+TITLE: Emacs Configuration
#+AUTHOR: Josias Duarte Busiquia

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Josias Duarte Busiquia"
      user-mail-address "iquabius@gmail.com")
#+END_SRC

* Packages to Take a Look

- [ ] [[https://github.com/WolfeCub/ox-mdx-deck/][Org-mode to mdx-deck exporter]]
  - Apresentações (slides) com React
- [ ] [[https://org-roam.readthedocs.io/en/master/installation/][Org-roam]]
  - Integration with VS Code
    - https://github.com/vscode-org-mode/vscode-org-mode/issues/161
- [ ] Hydra
- [ ] [[https://github.com/proofit404/anaconda-mode][Anaconda mode]]
- [ ] [[http://cestlaz.github.io/posts/using-emacs-13-yasnippet/][Elpy mode]]
- [ ] [[https://github.com/syohex/emacs-company-jedi/wiki][Company-jedi]]
- [ ] [[https://github.com/TheBB/spaceline][Spaceline]]
- [ ] [[http://cestlaz.github.io/posts/using-emacs-11-reveal/][Presentations with Org-mode and Reveal.js]]
- [ ] [[https://www.youtube.com/watch?v%3DpjhRFMUxBB4][better-shell]]
- [ ] [[https://www.youtube.com/watch?v%3D-2RXhPV_zgc][Org files workflow]]
- [ ] [[https://www.emacswiki.org/emacs/Mingus][Mingus MPD Interface]]
- [ ] [[https://github.com/SavchenkoValeriy/emacs-powerthesaurus][Powerthesaurus integration for Emacs]]


* Appearance
** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+END_SRC

I tend to switch themes more often than normal. For example, switching
to a lighter theme (such as the default) or to a different theme
depending on the time of day or my mood. Normally, switching themes is
a multi-step process with ~disable-theme~ and ~load-theme~. The
~switch-theme~ function will do that in one swoop. I just choose which
theme I want to go to.

** Dracula theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package dracula-theme
  :if (window-system)
  :ensure t
  :config (load-theme 'dracula t))
#+END_SRC

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch nil)
  :ensure t)
#+END_SRC

** Spacegray theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package spacegray-theme
  :if (window-system)
  :ensure t
  :config
  (load-theme 'spacegray))
#+END_SRC

** Monokai theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+END_SRC

** Waher theme

#+BEGIN_SRC emacs-lisp :tangle no
(use-package waher-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'waher))
#+END_SRC

** Zenburn theme

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
#+END_SRC

** Emacs on Terminal

Set a theme which looks good in a text-only terminal.

#+BEGIN_SRC emacs-lisp
(if (not (display-graphic-p))           ; if on text-only terminal
    (load-theme 'tsdh-dark t))
#+END_SRC

** Convenient theme functions

Taken from [[https://github.com/danielmai/.emacs.d][Daniel Mai's Configuration]].

#+BEGIN_SRC emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "<f12>" 'switch-theme)
(bind-key "<f11>" 'disable-active-themes)
#+END_SRC

** Indentation

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :disabled t
  :ensure t
  :init
  (setq highlight-indent-guides-method 'character)
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC

** Colored Variables

Color each variable, and downplay standard key words.

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :disabled t                           ; Too slow as of v1.0.0, and comments
                                        ; are also initially colorized
  :ensure t
  :diminish color-identifiers-mode
  :init
  (add-hook 'after-init-hook 'global-color-identifiers-mode))
#+END_SRC

* Mode Line

Bugged in Emacs 24.5.1 on Elementary OS 0.3 Freya: the mode line gets
all grey after moving the focus out of the Emacs window.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package powerline
  :ensure t
  :init
  (setq powerline-default-separator 'wave)
  :config
  (powerline-center-theme))
#+END_SRC

* Autocompletion & Templating

"[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates."

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :diminish (yas-minor-mode . " Ⓨ")
  :init (yas-global-mode))
#+END_SRC

“[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for
‘complete anything’. It uses pluggable back-ends and front-ends to
retrieve and display completion candidates.”

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  ;; Ergonomic navigation
  (unbind-key "M-p" company-active-map)
  (unbind-key "M-n" company-active-map)
  (bind-key "M-i" 'company-select-previous company-active-map)
  (bind-key "M-k" 'company-select-next company-active-map))
#+END_SRC

"Sort completion candidates by previous completion choices".

#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :ensure t
  :after company
  :config (company-statistics-mode))
#+END_SRC

Display documentation in a popup with [[https://www.github.com/expez/company-quickhelp][company-quickhelp]].

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  :init
  (setq company-quickhelp-delay nil)
  :config
  (company-quickhelp-mode 1)
  (bind-key "M-h" 'company-quickhelp-manual-begin company-active-map))
#+END_SRC

** Autocompletion for emoji: :watch: -> ⌚️
   #+BEGIN_SRC emacs-lisp
   (use-package company-emoji
     :ensure t
     :after company
     :init (add-to-list 'company-backends 'company-emoji))
   #+END_SRC

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;; check first if the file exists
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

* Flycheck

[[http://www.flycheck.org/][Flycheck]] is a modern on-the-fly syntax checking extension for GNU
Emacs, intended as replacement for the older Flymake extension which
is part of GNU Emacs.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer 1
  :config
  (global-flycheck-mode))
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init (progn
            (setq helm-ff-auto-update-initial-value t)
            (require 'helm-config)
            (use-package helm-ag :defer 10  :ensure t)
            (setq helm-M-x-fuzzy-match t)
            (helm-mode)
            (use-package helm-swoop
              :ensure t
              :config
              (setq helm-swoop-split-direction 'split-window-horizontally)
              (setq helm-swoop-use-fuzzy-match t)
              ;; "M-i" is used in ergonomic key bindings to move to previous line
              (unbind-key "M-i" helm-swoop-map)
              :bind (("s-i" . helm-swoop)
                     ("s-I" . helm-swoop-back-to-last-point)
                     :map helm-swoop-map
                     ("s-i" . helm-multi-swoop-all-from-helm-swoop)
                     :map isearch-mode-map
                     ("s-i" . helm-swoop-from-isearch))))
    :config
    ;; "M-i" is used in ergonomic key bindings to move to previous line
    (unbind-key "M-i" helm-find-files-map)
    (unbind-key "M-i" helm-generic-files-map)
    (bind-key "s-i" 'helm-ff-properties-persistent helm-find-files-map)
    (bind-key "s-i" 'helm-ff-properties-persistent helm-generic-files-map)
    :bind (("C-c h" . helm-command-prefix)
           ("C-x b" . helm-mini)
           ("C-x C-b" . ibuffer)
           ("C-x f" . helm-recentf)
           ("C-x C-f" . helm-find-files)
           ("M-x" . helm-M-x)
           ("C-c M-x" . execute-extended-command)                  ;; old M-x
           ("M-y" . helm-show-kill-ring)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           ("M-i" . helm-previous-line)
           ("M-k" . helm-next-line)))
#+END_SRC

* LaTex

#+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :config
  (progn
    (setq
     reftex-plug-into-AUCTeX t
     TeX-auto-save nil                  ; Do not use directory 'auto'
     TeX-parse-self t                   ; Enable parse on load.
     TeX-PDF-mode t
     TeX-source-correlate-mode t        ; Enable Synctex
     TeX-show-compilation t)            ; Show compilation buffer
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (LaTeX-math-mode)
                (TeX-fold-mode 1)
                (turn-on-reftex)
                (visual-line-mode)
                (setq TeX-clean-confirm nil)
                ;; (List of Listings), produced by the listings package.
                (add-to-list 'LaTeX-clean-intermediate-suffixes "\\.lol")))))
#+END_SRC

** LaTeXmk support for AUCTeX with [[https://github.com/tom-tan/auctex-latexmk][auctex-latexmk]]

   #+BEGIN_SRC emacs-lisp
   (use-package auctex-latexmk
     :ensure t
     :defer t
     :init (add-hook 'LaTeX-mode-hook 'auctex-latexmk-setup))
   #+END_SRC

** Autocompletion with company-auctex

   #+BEGIN_SRC emacs-lisp
   (use-package company-auctex
     :ensure t
     :defer t
     :init
     (add-hook 'LaTeX-mode-hook 'company-auctex-init))
   #+END_SRC

** Editing .bib files with bibtex-mode

   #+BEGIN_SRC emacs-lisp
   (use-package bibtex
     :mode ("\\.bib" . bibtex-mode)
     :init
     (progn
       (setq bibtex-align-at-equal-sign t)
       (add-hook 'bibtex-mode-hook (lambda () (set-fill-column 120)))))
   #+END_SRC

* Languages
** The Web

*** HTML

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :defer t
  :mode "\\.html\\'"
  :config (setq web-mode-enable-current-element-highlight t
                web-mode-markup-indent-offset 2))
#+END_SRC

*** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :defer t
  :config (setq css-indent-offset 2))
#+END_SRC

“~[[https://julien.danjou.info/projects/emacs-packages][rainbow-mode]]~ is a minor mode for Emacs which displays strings representing
colors with the color they represent as background.”

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :after ccs-mode
  :init
  (dolist (hook '(css-mode-hook haskell-mode-hook web-mode-hook))
    (add-hook hook 'rainbow-mode)))
#+END_SRC

** Elm

   #+BEGIN_SRC emacs-lisp
   (use-package elm-mode
     :ensure t
     :mode "\\.elm\\'"
     :config
     (use-package flycheck-elm
       :ensure t
       :config
       (add-hook 'flycheck-mode-hook #'flycheck-elm-setup))
     (add-to-list 'company-backends 'company-elm))
   #+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp
(defun set-js2-defaults ()
  "Sets default values for js and json files."
  (setq-default js2-electric-keys nil
                ;; Disable parse errors and strict warning. Flycheck FTW ;)
                js2-mode-show-parse-errors nil
                js2-mode-show-strict-warnings nil
                js2-highlight-level 3  ; Try to highlight most ECMA built-ins
                js2-basic-offset 2
                ))

(use-package js2-mode
  :ensure t
  :defer t
  :mode "\\.js\\'"
  :interpreter "node"
  :config
  (unbind-key "M-j" js2-mode-map)
  (set-js2-defaults))
#+END_SRC

Major mode for React JSX files:

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t
  :after js2-mode
  :mode (("\\.jsx\\'" . rjsx-mode)))
#+END_SRC

Use [[https://github.com/ternjs/tern][Tern]] IDE for intelligent JavaScript editing.

The 'tern' npm package must be installed globally:

#+BEGIN_SRC fish
npm install -g tern
#+END_SRC

Use [[https://github.com/proofit404/company-tern][company-tern]] for JavaScript autocompletion.
The maintainer removed company-tern, it's gone. I could still use just =tern= though.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package tern
  :ensure t
  :defer t
;  :diminish tern-mode
  :init
  (add-hook 'js2-mode-hook 'tern-mode)
  (use-package company-tern
    :ensure t
    :after company
    :init (add-to-list 'company-backends 'company-tern))
  :config
  ;; Don't generate port files
  (add-to-list 'tern-command "--no-port-file" 'append))
#+END_SRC

*** Json

    #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :ensure t
      :defer t
      :config
      (setq json-reformat:indent-width 2
            js-indent-level 2))
    #+END_SRC

** TypeScript

   #+begin_src emacs-lisp
   (use-package typescript-mode
     :ensure t)
   #+end_src

** Haskell

   Haskell major mode from [[https://github.com/lunaryorn/old-emacs-configuration/blob/master/init.el#L2079][lunaryorn]]:

   #+BEGIN_SRC emacs-lisp
   ;;; Customization
   (use-package validate                   ; Validate options
   :ensure t)

   (use-package haskell-mode
     :ensure t
     :defer t
     :bind (:map haskell-mode-map
                 ("M-." . haskell-mode-jump-to-def-or-tag)
                 ("C-c m i j" . haskell-navigate-imports)
                 ("C-c m i s" . haskell-sort-imports)
                 ("C-c m i a" . haskell-align-imports)
                 ;; Recommended Haskell Mode bindings, see
                 ;; http://haskell.github.io/haskell-mode/manual/latest/Interactive-Haskell.html
                 )
     :config
     (validate-setq haskell-tags-on-save t ; Regenerate TAGS on save
                    haskell-process-log t  ; Show log for GHCI process
                    ;; Remove unused imports and auto-import modules
                    haskell-process-suggest-remove-import-lines t
                    haskell-process-auto-import-loaded-modules t))
   #+END_SRC

   Haskell pretty printing

   #+BEGIN_SRC fish
   stack install hindent
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package hindent
     :ensure t
     :defer t
     :init
     (add-hook 'haskell-mode-hook #'hindent-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package flycheck-haskell
     ;; :disabled t
     :ensure
     :config
     (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))
   #+END_SRC

   - TODO: Document “C-c m” [[https://github.com/lunaryorn/old-emacs-configuration/blob/master/init.el#L306][key binding prefix]]
   - [[https://github.com/bixuanzju/emacs.d/blob/master/emacs-init.org#haskell-mode][Here's another example configuration]] from bixuanzju

** Lua

   #+begin_src emacs-lisp
   (use-package lua-mode
     :ensure t)
   #+end_src

** Dockerfile
   #+BEGIN_SRC emacs-lisp
   (use-package dockerfile-mode
     :ensure t
     :defer t)
   #+END_SRC

** Yaml
   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
     :ensure t
     :defer t
     :mode ("\\.yaml\\'" "\\.yml\\'"))
   #+END_SRC

** Fish Shell

#+BEGIN_SRC emacs-lisp
(use-package fish-mode
  :ensure t)
#+END_SRC

* Multiple Cursors

Yep multiple cursors FTW, [[http://emacsrocks.com/e13.html][Emacs Rocks]].

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind
  (("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-M->" . mc/unmark-next-like-this)
   ("C-M-<" . mc/unmark-previous-like-this)
   ("C-*" . mc/mark-all-like-this)
   ("C-8" . mc/mark-all-words-like-this)
   ("C-S-<SPC>" . set-rectangular-region-anchor))
  :init
  (bind-keys :prefix-map mc-map
             :prefix "C-x m"
             ("C-a" . mc/edit-beginnings-of-lines)
             ("C-e" . mc/edit-ends-of-lines)
             ("C-m" . mc/mark-all-dwim)
             ("a" . mc/mark-all-like-this)
             ("d" . mc/mark-all-symbols-like-this-in-defun)
             ("h" . mc-hide-unmatched-lines-mode)
             ("i" . mc/insert-numbers)
             ("l" . mc/edit-lines)
             ("n" . mc/mark-next-like-this)
             ("r" . mc/reverse-regions)
             ("s" . mc/sort-regions)))
#+END_SRC

* Org-mode
** Apps

   Set up the apps I want to open linked files with:

   #+begin_src emacs-lisp
   (use-package org
     :defer t
     :config
     ;; https://emacs.stackexchange.com/a/30601/12553
     (setq org-file-apps
       '(("\\.mp4\\'" . "vlc %s")
         ("\\.pdf\\'" . default)
         (auto-mode . emacs))))
   #+end_src

** Agenda

   #+BEGIN_SRC emacs-lisp
   (use-package org
     :defer t
     :bind ("C-c a" . org-agenda)
     :config
     (setq org-agenda-files (quote ("~/Org.d/main.org" "~/Org.d/work.org" "~/Org.d/gcal.org"))
           ;; open agenda in current window
           org-agenda-window-setup (quote current-window)

           ;; Take advantage of screen real state. Font face and size also affect
           ;; the position that tags are show in the screen.
           org-agenda-tags-column -110

           org-agenda-skip-scheduled-if-done t
           org-agenda-skip-deadline-if-done t
           ;; Don't warn about tasks' deadlines if they are scheduled
           org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled))
   #+END_SRC
** Google Calendar Sync

   Note: multiple calendars doesn't work well yet, see [[https://github.com/myuhe/org-gcal.el/issues/75#issuecomment-289771378][github issue]].

   #+BEGIN_SRC emacs-lisp
   (use-package org-gcal
     :ensure t
     :config
     (setq org-gcal-client-id "221107348670-bv77qnslvu96hpdsfskqvus7im7tm9vo.apps.googleusercontent.com"
        org-gcal-client-secret "fAaFYYoGauyTx4eHV1GFX_4U"
        org-gcal-file-alist '(("iquabius@gmail.com" .  "~/Org.d/gcal.org")
                              ("ccs2scg30kpbtkjiifnndqkh7o@group.calendar.google.com" . "~/Org.d/work-gcal.org"))))
   #+END_SRC

** Org-roam

   There are 2 ways to use the capture template ="w"=. The first is to create a
   bookmarklet with title "Org-roam Notes" and the following URL:

   #+begin_src js
   javascript:location.href ='org-protocol://roam-ref?template=w&ref='+ encodeURIComponent(location.href)+ '&title='+ encodeURIComponent(document.title)
   #+end_src

   The second is to create a shortcut in Shortkeys extension to execute the
   following JavaScript code:

   #+begin_src js
   location.href ='org-protocol://roam-ref?template=w&ref='+ encodeURIComponent(location.href)+ '&title='+ encodeURIComponent(document.title)
   #+end_src

   Also set up =org-protocol=:
   https://www.orgroam.com/manual/Installation-_00281_0029.html#Installation-_00281_0029.

   #+begin_src emacs-lisp
   (use-package org-roam
     :ensure t
     :hook
     (after-init . org-roam-mode)
     :custom
     (org-roam-directory "~/Org.d/Roam")
     :init
     (require 'org-roam-protocol)
     ;sqlite3
     (add-to-list 'exec-path "/home/iqb/Android/Sdk/platform-tools")
     (setq org-roam-graph-viewer "/usr/bin/chromium-browser")
     (setq org-roam-capture-ref-templates
           ;; See above how to use this template
           '(("w" "websites" plain (function org-roam-capture--get-point)
              "%?"
              :file-name "websites/${slug}"
              :head "#+title: ${title}\n#+roam_key: ${ref}\n\n"
              :unnarrowed t)))
     :bind (:map org-roam-mode-map
                 (("C-c n l" . org-roam)
                  ("C-c n f" . org-roam-find-file)
                  ("C-c n g" . org-roam-graph-show))
                 :map org-mode-map
                 (("C-c n i" . org-roam-insert))
                 (("C-c n I" . org-roam-insert-immediate))))
   #+end_src

   Company integration:

   #+begin_src emacs-lisp
   (use-package company-org-roam
     :ensure t
     :after org-roam company org
     :pin MELPA
     :config
     (push 'company-org-roam company-backends))
   #+end_src

** Note Taking

   #+BEGIN_SRC emacs-lisp
   (use-package org
     :bind ("C-c c" . org-capture)
     :init
     (setq org-directory "~/Org.d"
           org-default-notes-file (concat org-directory "/main.org"))
     :config
     (setq org-log-into-drawer t

           org-capture-templates
           '(("p" "Personal")

             ("pa" "Appointment" entry
              (file "~/Org.d/gcal.org")
              "* %?\n  :PROPERTIES:\n  :END:\n  %^T\n\n")

             ("pt" "ToDo Entry" entry
              (file+headline org-default-notes-file "Inbox")
              (file "~/.emacs.d/org-templates/todo.orgcaptmpl")
              :empty-lines-before 1 :empty-lines-after 2)

             ("pj" "Journal Entry" plain
              (file+datetree "~/Org.d/journal.org")
              "     %<%H:%M> %?\n     %i\n     %a\n\n"
              :unnarrowed t)

             ("pJ" "Journal entry with date" plain
              (file+datetree+prompt "~/Org.d/journal.org")
              "     %<%H:%M> %?\n     %i\n     %a\n\n"
              :unnarrowed t)

             ("w" "Work")

             ("wa" "Appointment" entry
              (file "~/Org.d/work-gcal.org")
              "* %?\n  :PROPERTIES:\n  :END:\n  %^T\n\n")

             ("wl" "Logbook Entry" entry
              (file+datetree "~/Org.d/work-logbook.org")
              "** %U - %^{Activity}  :LOG:")

             ("wj" "Journal Entry" plain
              (file+datetree "~/Org.d/work-journal.org")
              (file "~/.emacs.d/org-templates/journal.orgcaptmpl")
              :empty-lines-after 1))))
   #+END_SRC

** Presentations

   Org-reveal comes with some [[https://github.com/hakimel/reveal.js/#theming][themes]].

   #+BEGIN_SRC emacs-lisp
   (use-package ox-reveal
     :disabled t
     :ensure t
     :config
     (defun emacs-d (filename)
       "Expand FILENAME relative to `user-emacs-directory'."
       (expand-file-name filename user-emacs-directory))
     ;; use local or remote reveal.js
     (setq org-reveal-root (concat "file://" (emacs-d "js/reveal.js/reveal.js-3.4.1")))
     ;; (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.4.1/")
     (setq org-reveal-mathjax t))

   (use-package htmlize
     :ensure t)
   #+END_SRC

** LaTeX Integration

   This enables us to type =<s + TAB= to expand to a =#+begin_src ... #+end_src=
   block.
   https://github.com/syl20bnr/spacemacs/issues/11798#issuecomment-454941024

   #+begin_src emacs-lisp
   (when (version<= "9.2" (org-version))
       (require 'org-tempo))
   #+end_src

** Reference Management
   #+BEGIN_SRC emacs-lisp
   (use-package org
     :defer t
     :config
     (setq
      ;org-latex-pdf-process (list "latexmk -f -pdf %f")
      reftex-default-bibliography "~/Org.d/Refs/research.bib")
     (use-package cdlatex
       :ensure t
       :config (add-hook 'org-mode-hook 'turn-on-org-cdlatex))

     (eval-after-load 'org
       '(setf org-highlight-latex-and-related '(latex)))

     ;; Tell the latex export to use the minted package for source code
     ;; coloration.
     (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))

     (require 'ox-latex)
     (setq org-latex-listings 'minted)

     ;; (setq org-latex-minted-options
     ;;       '(("fontsize" "\\scriptsize")
     ;;         ("baselinestretch" "1.2")))
     )
  #+END_SRC

   Ref: https://emacs.stackexchange.com/a/29455/12553
   # TODO: Wrap in (use-package org) to execute only when in org-mode
   #+begin_src emacs-lisp
   (defun org-abntex-quote-block (quote-block contents info)
     "Transcode a QUOTE-BLOCK element from Org to LaTeX (abntex style).
       CONTENTS holds the contents of the block.  INFO is a plist
       holding contextual information."
     (org-latex--wrap-label
      quote-block
      (format "\\begin{citacao}\n%s\\end{citacao}" contents) info))


   ;; To add a :menu-entry look source code of ox-latex.el
   (org-export-define-derived-backend 'abntex 'latex
     :translate-alist '((quote-block . org-abntex-quote-block)))


   (defun org-latex-export-to-abntex
     (&optional async subtreep visible-only body-only ext-plist)
     "Export current buffer to a LaTeX file using abntex.

   https://github.com/abntex/abntex2."
     (interactive)
     (let ((outfile (org-export-output-file-name ".tex" subtreep)))
       (org-export-to-file 'abntex outfile
         async subtreep visible-only body-only ext-plist)))

   (defun org-latex-export-to-abntex-file ()
       (interactive)
       (org-latex-export-to-abntex nil nil nil t))

   (bind-keys ("C-c e" . org-latex-export-to-abntex-file))
   ;; To export on save: https://emacs.stackexchange.com/a/52453/12553

   ;; (use-package tex-site
   ;;   :ensure ox
   ;;   :config
   ;;   (add-hook 'org-mode-hook
   ;; 	    (lambda ())
   #+end_src


  #+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :after org
    :init
    (use-package helm-bibtex
      :ensure t
      ;:after helm
      :config
      (setq bibtex-completion-bibliography "~/LaTeX/refs.bib"
            bibtex-completion-library-path "~/Mega/Old/Files/ZotFiles"
            bibtex-completion-pdf-field "File"
            bibtex-completion-notes-path "~/Org.d/Refs/research.org"))

    (setq reftex-default-bibliography '("~/LaTeX/refs.bib"))
    (setq org-ref-bibliography-notes "~/Org.d/Refs/research.org"
          org-ref-default-bibliography '("~/LaTeX/refs.bib")
          org-ref-pdf-directory "~/Mega/Old/Files/ZotFiles")

    (setq helm-bibtex-bibliography "~/LaTeX/refs.bib")
    (setq helm-bibtex-library-path "~/Mega/Old/Files/ZotFiles")

    (setq helm-bibtex-pdf-open-function 'org-open-file)

    (setq helm-bibtex-notes-path "~/Org.d/Refs/research.org")
    :config
                                        ;(key-chord-define-global "uu" 'org-ref-cite-hydra/body)
    ;; variables that control bibtex key format for auto-generation
    ;; I want firstauthor-year-title-words
    ;; this usually makes a legitimate filename to store pdfs under.
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator "-"
          bibtex-autokey-year-title-separator "-"
          bibtex-autokey-titleword-separator "-"
          bibtex-autokey-titlewords 2
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5))
  #+END_SRC

** Refiling

   #+BEGIN_SRC emacs-lisp
   (use-package org
     :config (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3)))
                   org-refile-allow-creating-parent-nodes 'confirm
                   org-refile-use-outline-path 'file
                   org-refile-use-cache t
                   org-outline-path-complete-in-steps nil))
   #+END_SRC

** Tasks

*** Context Tags

    #+BEGIN_SRC emacs-lisp
    (setq org-tag-alist '(("@home" . ?h)
                          ("@errands" . ?e)
                          ("@phone" . ?p)
                          ("@computer" . ?c)))
    #+END_SRC

*** Task States

    #+BEGIN_SRC emacs-lisp
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

    (setq org-todo-keyword-faces
          (quote (("TODO" :foreground "red" :weight bold)
                  ("NEXT" :foreground "blue" :weight bold)
                  ("DONE" :foreground "forest green" :weight bold)
                  ("WAITING" :foreground "orange" :weight bold)
                  ("HOLD" :foreground "magenta" :weight bold)
                  ("CANCELLED" :foreground "forest green" :weight bold)
                  ("MEETING" :foreground "forest green" :weight bold)
                  ("PHONE" :foreground "forest green" :weight bold))))
    #+END_SRC

** Exporting

   #+BEGIN_SRC emacs-lisp
   (setq org-export-coding-system 'utf-8)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package ox-latex
     :defer 3
     :config
     (setq org-latex-caption-above '(table src-block)
           org-latex-prefer-user-labels t)
     (add-to-list 'org-latex-classes
                  '("abntex2"
                    "\\documentclass[12pt,
                                    a4paper,
                                    oneside,
                                    chapter=TITLE,
                                    section=TITLE,
                                    english,
                                    brazil,
                                    ]{abntex2}
                    \\usepackage{lmodern}
                    \\usepackage[T1]{fontenc}
                    \\usepackage[AUTO]{inputenc}
                    \\usepackage{indentfirst}
                    \\usepackage{color}
                    \\usepackage{graphicx}
                    \\usepackage{microtype}

                    % Pacotes de citacoes
                    \\usepackage[brazilian,hyperpageref]{backref}
                    \\usepackage[alf
                                ,abnt-etal-cite=2
                                ,abnt-etal-list=2
                                ]{abntex2cite}
                    \\usepackage{csquotes}

                    [NO-DEFAULT-PACKAGES]
                    [PACKAGES]
                    [EXTRA]"

                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
   #+END_SRC

** Appearance

   I like to see an outline of pretty bullets instead of a list of asterisks.

   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook #'org-bullets-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (setq org-hide-leading-stars t)
   #+END_SRC

Show a downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

Here is some that could be used: ⤶, ⤷, ⤵, ↩, ⮰, ⮷, ↲, ↵, ↴, ⬎, ↷, ▼, ⋱

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "…")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
;; TODO Save file on exiting
(eval-after-load 'org-src
    '(define-key org-src-mode-map
       "\C-x\C-s" #'org-edit-src-exit))
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

Don't add extra indentation after edinting a code snippet in the org
src buffer.

#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation nil)
(setq org-edit-src-content-indentation 0)
#+END_SRC

Remove trailing lines from the source block after editing it in the
org src buffer.

#+BEGIN_SRC emacs-lisp
(setq org-src-strip-leading-and-trailing-blank-lines t)
#+END_SRC

* Projects

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind (:map projectile-mode-map
             ("C-c p" . projectile-command-map))
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :init (progn
          (projectile-global-mode t)
          (setq projectile-enable-caching t)
          (setq projectile-completion-system 'helm)
          (use-package helm-projectile
            :ensure t
            :config (helm-projectile-on))))
#+END_SRC

* Font
  Here's how we tell Emacs to use the font we want:

  # https://emacs.stackexchange.com/questions/2501/how-can-i-set-default-font-in-emacs
  # https://stackoverflow.com/questions/6026713/how-do-i-change-emacs-default-font-size-and-font-type
  #+BEGIN_SRC emacs-lisp
  ; (set-frame-font "Menlo 18" nil t)
  (set-default-font "Menlo 12")
  #+END_SRC

* Git Integration

Magit provides a nice interface to the /git/ version control system.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
#+END_SRC

Integration between Magit and [[https://github.com/RichiH/vcsh][vcsh]]. See the experimental project on
https://github.com/vanicat/magit-vcsh.

#+BEGIN_SRC emacs-lisp
;; TODO move it to "~/.emacs.d/"
(load-file "~/Code/elisp/magit-vcsh/magit-vcsh.el")
#+END_SRC

Git-gutter shows a sign in the gutter area indicating whether a line
as inserted, modified or deleted.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :diminish git-gutter-mode
    :init
    (global-git-gutter-mode t)
    :config
    (custom-set-variables
     '(git-gutter:modified-sign "●"))
    :bind (("C-x C-g" . git-gutter:toggle)
           ("C-x v =" . git-gutter:popup-hunk)
           ("C-x p" . git-gutter:previous-hunk)
           ("C-x n" . git-gutter:next-hunk)
           ("C-x v s" . git-gutter:stage-hunk)
           ("C-x v r" . git-gutter:revert-hunk)))
#+END_SRC

Special mode for Git's configuration file.

#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode
  :ensure t)
#+END_SRC

=.gitignore= mode:

#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode
  :ensure t)
#+END_SRC

* Writing & Research

** Spell Checking

*** Aspell

   Install spell checker utility and dictionary:

   #+BEGIN_SRC fish
   sudo apt-get install -y aspell aspell-en aspell-pt-br
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package ispell
     :defer t
     ;:init (add-to-list 'company-backends 'company-ispell)
     :config
     (setq
      ispell-program-name "aspell"
      ispell-dictionary "en_US"            ; Default dictionnary
      ispell-silently-savep t              ; Don't ask when saving the private dict
      ;; Increase the height of the choices window to take our header line into
      ;; account.
      ispell-choices-win-default-height 5)

     (unless ispell-program-name
       (warn "No spell checker available.  Install Hunspell or ASpell for GNU/Linux.")))
   #+END_SRC


*** Switching Dictionaries Helper Function

   #+BEGIN_SRC emacs-lisp
   (defun fd-switch-dictionary()
     (interactive)
     (let* ((dic ispell-current-dictionary)
            (change (if (string= dic "pt_BR") "english" "pt_BR")))
       (ispell-change-dictionary change)
       (message "Dictionary switched from %s to %s" dic change)
       ))

   (bind-key "<f8>" 'fd-switch-dictionary)
   #+END_SRC


*** Flyspell: On-the-fly spell checking

   #+BEGIN_SRC emacs-lisp
   (use-package flyspell
     :bind (("C-c t s" . flyspell-mode)
            ("C-c l b" . flyspell-buffer))
     :init
     (dolist (hook '(text-mode-hook message-mode-hook))
       (add-hook hook 'turn-on-flyspell))
     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
     :config
     (setq
      flyspell-use-meta-tab nil
      ;; Make Flyspell less chatty
      flyspell-issue-welcome-flag nil
      flyspell-issue-message-flag nil)

     ;; Free C-M-i for completion
     (define-key flyspell-mode-map "\M-\t" nil)
     ;; Undefine mouse buttons which get in the way
     (define-key flyspell-mouse-map [down-mouse-2] nil)
     (define-key flyspell-mouse-map [mouse-2] nil)
     :diminish (flyspell-mode . " ⓢ"))
   #+END_SRC


*** Flyspell with Helm

    Helm interface for Flyspell: [[https://github.com/d12frosted/flyspell-correct][flyspell-correct]].

    #+BEGIN_SRC emacs-lisp
    (use-package flyspell-correct
      :ensure t
      :bind (:map flyspell-mode-map
             ("C-;" . flyspell-correct-word-generic)
             ("C-:" . flyspell-correct-previous-word-generic))
      :init (use-package flyspell-correct-helm
              :ensure t
              :config (setq flyspell-correct-interface 'flyspell-correct-helm)))
    #+END_SRC


** Referencing Zotero items from within Org mode

   A good way for referencing [[https://www.zotero.org/][Zotero]] items from within Org mode is by using the
   *[[https://github.com/egh/zotxt-emacs][zotxt-emacs]]* package, which depends on the *[[https://gitlab.com/egh/zotxt][zotxt]]* Zotero extension.

   *[[http://www.mkbehr.com/files/mkbehr-short.csl][mkbeh-short]]* is a short citation template created by Michael Behr. It can be
   downloaded from /[[http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/][A research workflow with Zotero and Org mode]]/. To install:
   /Zotero -> Edit -> Preferences -> Cite -> Styles -> +/.

   #+BEGIN_SRC emacs-lisp
   (defun org-zotxt-insert-current-item ()
     "Insert reference link for currently selected item from Zotero"
     (interactive)
     (org-zotxt-insert-reference-link '(4)))

   (use-package zotxt
     :ensure t
     :defer t
     :bind (:map org-mode-map
            ;; Bind something to replace the awkward C-u C-c " i
            ("C-c \" \"" . org-zotxt-insert-current-item))
     :init
     (add-hook 'org-mode-hook #'org-zotxt-mode)
     :config
     ;; Change citation format to be less cumbersome in files.
     '(setq zotxt-default-bibliography-style "mkbehr-short"))
   #+END_SRC


** Zotelo for syncing .bib files with Zotero collections

   [[https://github.com/vspinu/zotelo][Zotelo]] depends on the [[https://addons.mozilla.org/en-US/firefox/addon/mozrepl/][MozRepl]] Firefox extension, which can be downloaded and
   installed in Zotero Standalone as an add-on. After installing, it can be
   [[https://forums.zotero.org/discussion/29885/mozrepl-in-zotero-standalone][configured to autostart]] with Zotero:

   /Edit -> Preferences -> Advanced -> Open about:config -> Agree to be careful
   -> Search for “extensions.mozrepl.autoStart” -> Toggle its value from false
   to true by double-clicking./

   #+BEGIN_SRC emacs-lisp
   (use-package zotelo
     :ensure t
     :commands (zotelo-set-collection
                zotelo-update-database
                zotelo-minor-mode)
     :init
     (add-hook 'TeX-mode-hook 'zotelo-minor-mode)
     :config
     (setq zotelo-use-ido nil))
   #+END_SRC

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+BEGIN_SRC emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; Turn off the blinking cursor
;(blink-cursor-mode 1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

;; Highlights matching parenthesis
(show-paren-mode t)

;; Show column number next to line number
;; Not needed with powerline
(column-number-mode t)

;; Soft-wrapping
(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; Auto refresh files when changed from disk
(global-auto-revert-mode t)
;(setq auto-revert-verbose nil)

;; “Save clipboard strings into kill ring before replacing them.”
(setq save-interprogram-paste-before-kill t)

;; Always strip trailing whitespaces from the file
;(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; -i gets alias definitions from .bash_profile
;; Looks like it's causing these bugs (noticed in projectile file listings):
;;   - bash: cannot set terminal process group (-1): Inappropriate ioctl for device
;;   - bash: no job control in this shell
;(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell t)

;; Make emacs maximized on startup
;(to-add-list 'default-frame-alist '(fullscreen . maximized))
;; Take emacs into fullscreen mode
(set-frame-parameter nil 'fullscreen 'fullboth)
(if (daemonp)
    (add-to-list 'default-frame-alist '(fullscreen . fullboth)))

;; Allows you to “undo” (and “redo”) changes in the window configuration
;; ‘C-c left’ and ‘C-c right’
(winner-mode t)

;; Default window splitting direction
;; 1: horizontally
;; 2: vertically
;; (setq split-width-threshold 1)

;; Automatically close parentheses, square brackets, double quotes...
(electric-pair-mode 1)

;; Increase fill column (default is 70) and enable automatic filling
(setq-default fill-column 80)
(add-hook 'text-mode-hook #'auto-fill-mode)
(diminish 'auto-fill-function " Ⓕ")
#+END_SRC

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+BEGIN_SRC emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+END_SRC

* Scrolling

#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :ensure t
  :init (setq smooth-scroll-margin 5)
  :config (smooth-scrolling-mode t))
#+END_SRC

** Cursor Guiding

Highlight current line, and keep syntax highlighting.

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode -1)

(set-face-foreground 'highlight nil)
#+END_SRC

If your theme's line highlighting is to intrusive (like /tango-dark/),
use 'on-screen' and/or 'beacon' to "guide your eyes while scrolling".

#+BEGIN_SRC emacs-lisp :tangle no
(use-package on-screen
  :ensure t
  :config
  (on-screen-global-mode +1))
#+END_SRC

"A light that follows your cursor around so you don't lose it!"

Ⓑ ⓑ ⒝ ḇ Ḇ ḅ Ḅ ɓ Ƀ ƅ Ƅ ƃ Ƃ Ɓ ß ƀ
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :diminish (beacon-mode . " ⓑ")
  :config
  (beacon-mode 1))
#+END_SRC

* Undo Tree

In Emacs is very confusing to redo things, you have to undo the undo.
For that reason I like to use the *undo-tree* package.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode))
#+END_SRC

* Utilities
** Try

   [[https://github.com/larstvei/Try][Try]] allow us to try out packages without installing them.

   #+BEGIN_SRC emacs-lisp
   (use-package try
   	:ensure t)
   #+END_SRC

** Typo-mode Ⓣ

   Automatically use typographic quotes and dashes.

   #+BEGIN_SRC emacs-lisp
   (use-package typo
     :ensure t
     :diminish (typo-mode . " Ⓣ")
     :bind (("C-c t t" . typo-mode)
            ("C-c l L" . typo-change-language))
     :init
     (add-hook 'text-mode-hook #'typo-mode)
     :config
     (setq-default typo-language "English"))
   #+END_SRC

** Hungry Delete

   Deletes all the whitespace when you hit backspace or delete

   #+BEGIN_SRC emacs-lisp
   (use-package hungry-delete
     :disabled t
     :ensure t
     :config
     (global-hungry-delete-mode))
   #+END_SRC

** Expand Region

   Expand region by semantic units (negative prefix to reduce region)

   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :bind (("C-c v" . er/expand-region)))
   #+END_SRC

* Whiteface

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :diminish whitespace-mode
  :bind ("C-c w" . whitespace-mode)
  :init
  (setq whitespace-display-mappings
        '((space-mark   ?\     [?\u00B7]     [?.])      ; space
          (space-mark   ?\xA0  [?\u00A4]     [?_])      ; hard space
          (newline-mark ?\n    [?¬ ?\n])                ; end-of-line
          (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t]) ; tab
          )
        whitespace-style '(face
                           lines-tail
                           newline
                           newline-mark
                           spaces
                           space-mark
                           tabs
                           tab-mark
                           trailing)
        whitespace-line-column 80)
  :config
  ;; TODO: must reset these after using the ~switch-theme~ function.
  (set-face-background 'whitespace-space   nil)
  (set-face-background 'whitespace-hspace  nil)
  (set-face-background 'whitespace-newline nil)
  (set-face-background 'whitespace-tab     nil))
#+END_SRC

Some characters to use: ¬ » · ◦ ↩ ▶ ➺ ➳ ➵ ➼ ¶

* Windows

[[https://github.com/abo-abo/ace-window][=ace-window=]] is a package for selecting a window to switch to.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  ; could use M-p for this
  :bind (([remap other-window] . ace-window)))
#+END_SRC
* Financing

  #+BEGIN_SRC fish
  apt install ledger
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :mode "\\.ledger\\'"
    :config
    (define-key ledger-mode-map (kbd "C-c c") 'ledger-mode-clean-buffer)
    (setq ledger-post-amount-alignment-at :decimal
          ledger-post-amount-alignment-column 49
          ledger-clear-whole-transactions t)
    (use-package flycheck-ledger :ensure t))
  #+END_SRC

* Keys & Key Bindings

Ergonomic natigation inspired by [[https://ergoemacs.github.io/][Ergoemacs]].

#+BEGIN_SRC emacs-lisp
(bind-keys ("M-i" . previous-line)
           ;; Couldn't use shift here because it starts selection
           ("M-C-i" . scroll-down)
           ("M-j" . backward-char)
           ("M-k" . next-line)
           ("M-C-k" . scroll-up)
           ("M-l" . forward-char)
           ("M-o" . forward-word)
           ("M-u" . backward-word)
           ("C-M-o" . forward-paragraph)
           ("C-M-u" . backward-paragraph))

(bind-keys ("s-b" . browse-url-at-point))
#+END_SRC

[[https://github.com/justbur/emacs-which-key][=which-key=]] is a minor mode for Emacs that displays the key bindings
following your currently entered incomplete command (a prefix) in a
popup.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.4)
  (which-key-mode))
#+END_SRC
